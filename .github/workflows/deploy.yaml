name: Deploy dos pacotes das aplicações
on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
      environment:
          required: true
          type: string
      image: 
          required: true
          type: string
env:
  EKS_NAME: "${{ inputs.environment }}-${{ vars.BASE_EKS_CLUSTER_NAME }}"  
jobs:

  deploy:
    name: "Deploy da aplicação ${{ inputs.app_name }}"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Update kube config
        run: aws eks update-kubeconfig --name ${{ env.EKS_NAME }}
      
      - uses: azure/setup-kubectl@v4
        id: install-kubectl
      
      - uses: azure/setup-helm@v4.3.0
        id: install-helm
      
      - name: Configure Load Balancer
        run: |
          helm repo add eks https://aws.github.io/eks-charts
          helm repo update eks
          helm upgrade -i aws-load-balancer-controller eks/aws-load-balancer-controller \
            -n kube-system \
            --set clusterName=${{ env.EKS_NAME }} \
            --set serviceAccount.create=false \
            --set serviceAccount.name=aws-load-balancer-controller \
            --version 1.13.0
          kubectl -n kube-system rollout status deployment aws-load-balancer-controller
      
      - name: Preper Kubernetes manifests
        run: |         
          envsubst < k8s/${{ inputs.app_name }}/configmap.yaml > k8s/${{ inputs.app_name }}/configmap-final.yaml
          envsubst < k8s/${{ inputs.app_name }}/secrets.yaml > k8s/${{ inputs.app_name }}/secrets-final.yaml
          envsubst < k8s/${{ inputs.app_name }}/deployment.yaml > k8s/${{ inputs.app_name }}/deployment-final.yaml
        env:
          IMAGE: ${{ inputs.image }}
          ASPNETCORE_ENVIRONMENT: ${{ inputs.environment == 'dev' && 'Development' || 'Production' }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          PAYMENT_SERVICE_USER_ID: ${{ vars.PAYMENT_SERVICE_USER_ID }}
          PAYMENT_SERVICE_NOTIFICATION_PAYMENT_URL: ${{ vars.PAYMENT_SERVICE_NOTIFICATION_PAYMENT_URL }}
          PAYMENT_SERVICE_EXTERNAL_POS_ID: ${{ vars.PAYMENT_SERVICE_EXTERNAL_POS_ID }}
          PAYMENT_SERVICE_TOKEN: ${{ secrets.PAYMENT_SERVICE_TOKEN }}
          PAYMENT_SERVICE_BASE_URL: ${{ vars.PAYMENT_SERVICE_BASE_URL }}
      - name: Deploy to EKS
        run: |
          kubectl apply -f k8s/${{ inputs.app_name }}/configmap-final.yaml
          kubectl apply -f k8s/${{ inputs.app_name }}/secrets-final.yaml
          kubectl apply -f k8s/${{ inputs.app_name }}/deployment-final.yaml
          kubectl apply -f k8s/${{ inputs.app_name }}/service.yaml
          kubectl apply -f k8s/${{ inputs.app_name }}/hpa.yaml          
          kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml

      - name: Wait for LoadBalancer DNS
        run: |
            echo "Waiting for LoadBalancer DNS to be assigned..."
            
            ATTEMPTS=0
            MAX_ATTEMPTS=30
            
            while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
              DNS=$(kubectl get service ${{ inputs.app_name }}-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
              
              if [ -n "$DNS" ]; then
                echo "DNS_ADDRESS=$DNS" >> $GITHUB_ENV
                echo "LoadBalancer DNS assigned: $DNS"
                break
              fi
              
              ATTEMPTS=$((ATTEMPTS+1))
              echo "Attempt $ATTEMPTS/$MAX_ATTEMPTS - DNS not yet assigned, waiting 10 seconds..."
              sleep 10
            done
            
            if [ $ATTEMPTS -eq $MAX_ATTEMPTS ]; then
              echo "Timed out waiting for LoadBalancer DNS"
              exit 1
            fi
        
        # Você pode usar este passo para salvar o DNS como um output da execução
      - name: Create DNS Output
        run: |
          echo "## API Endpoint" >> $GITHUB_STEP_SUMMARY
          echo "✅ Serviço disponível em: http://${{ env.DNS_ADDRESS }}" >> $GITHUB_STEP_SUMMARY

      