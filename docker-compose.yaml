networks:
  app-network:
    driver: bridge

services:
  api:
    build:
      context: .
      dockerfile: DockerfileApi
    healthcheck:
      test: ["CMD", "curl", "-f", "http://api:8080/api/hc"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    ports:
      - "8080:8080"
      - "8081:8081"
    depends_on:
      - db
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - DbConnection__Host=db
      - DbConnection__Database=${DbConnection__Database}
      - DbConnection__User=${DbConnection__User}
      - DbConnection__Password=${DbConnection__Password}
      - PaymentService__UserId=${PaymentService__UserId}
      - PaymentService__NotificationPaymentUrl=${PaymentService__NotificationPaymentUrl}
      - PaymentService__ExternalPosId=${PaymentService__ExternalPosId}
      - PaymentService__Token=${PaymentService__Token}
      - PaymentService__BaseUrl=${PaymentService__BaseUrl}
    networks:
      - app-network
  webhook:
    build:
      context: .
      dockerfile: DockerfileWebhook
    healthcheck:
      test: ["CMD", "curl", "-f", "http://webhook:8080/webhook/hc"]
      interval: 60s
      timeout: 10s
      retries: 5
      start_period: 40s
    ports:
      - "8082:8080"
      - "8083:8081"
    depends_on:
      - db
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - DbConnection__Host=db
      - DbConnection__Database=${DbConnection__Database}
      - DbConnection__User=${DbConnection__User}
      - DbConnection__Password=${DbConnection__Password}
      - PaymentService__BaseUrl=${PaymentService__BaseUrl}
    networks:
      - app-network

  mock-payment:
    build:
      context: .
      dockerfile: DockerfileMockPaymentService
    healthcheck:
      test: ["CMD", "curl", "-f", "http://mock-payment:8080/mock/hc"]
      interval: 60s
      timeout: 10s
      retries: 5
      start_period: 40s
    ports:
      - "8084:8080"
      - "8085:8081"
    depends_on:
      - webhook
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - BaseWebhookUrl=http://webhook:8080
    networks:
      - app-network
  db:
    image: postgres:17.2
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DbConnection__User} -d ${DbConnection__Database}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: always
    ports:
      - "5432:5432"
    environment:      
      POSTGRES_DB: ${DbConnection__Database}
      POSTGRES_USER: ${DbConnection__User}
      POSTGRES_PASSWORD: ${DbConnection__Password}
    volumes:
      - ./database/01-criacao_banco_dados.sql:/docker-entrypoint-initdb.d/01-criacao_banco_dados.sql
      - ./database/02-insert_dados_iniciais.sql:/docker-entrypoint-initdb.d/02-insert_dados_iniciais.sql
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network

volumes:
  pgdata: